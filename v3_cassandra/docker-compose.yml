version: '3'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - flight_network
    restart: always

  kafka:
    image: wurstmeister/kafka:2.12-2.3.0
    container_name: kafka
    environment:
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://192.168.1.100:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
    - "9092:9092"  # Exponer el puerto para acceso externo
    networks:
      - flight_network
    restart: always
    depends_on:
    - zookeeper
    entrypoint: /bin/sh -c "until nc -z -v -w30 zookeeper 2181; do echo 'Esperando a Zookeeper...'; sleep 5; done; /usr/bin/start-kafka.sh & echo 'Esperando a Kafka...'; until kafka-topics.sh --list --bootstrap-server kafka:9092; do sleep 5; done; kafka-topics.sh --create --topic flight_delay_classification_request --partitions 1 --replication-factor 1 --bootstrap-server kafka:9092; wait"


  # mongo:
  #   image: mongo:6.0  # Usar la versión 6.0 de MongoDB
  #   container_name: mongo
  #   ports:
  #     - "27017:27017"
  #   networks:
  #     - flight_network
  #   volumes:
  #     - ./init-data:/init-data:ro
  #     - ./mongo-init-scripts:/docker-entrypoint-initdb.d:ro
  #   restart: always
  #   command: ["mongod"]

  # mongo-seed:
  #   image: mongo:6.0  # Usa la imagen de Mongo directamente
  #   container_name: mongo-seed
  #   depends_on:
  #     - mongo
  #   networks:
  #     - flight_network
  #   volumes:
  #     - ./mongo-seed:/init-data  # Monta el directorio con los datos
  #   command: /bin/bash -c "/init-data/import_distances.sh"  # Ejecuta el script de importación
  #   restart: on-failure

  cassandra:
      image: cassandra:3.11  # Usar la versión 3.11 de Cassandra (ajusta según lo que necesites)
      container_name: cassandra
      ports:
        - "9042:9042"  # Puerto predeterminado de Cassandra
      networks:
        - flight_network
      volumes:
        - ./init-data:/init-data:ro  # Monta tus datos de inicialización si es necesario
      restart: always
      command: ["cassandra", "-f"]  # Inicia Cassandra en primer plano
      healthcheck:
        test: ["CMD", "cqlsh", "-e", "SELECT now() FROM system.local"]
        interval: 30s
        retries: 5
        start_period: 30s
        timeout: 10s

  cassandra-seed:
    image: cassandra:3.11  # Usa la misma imagen de Cassandra
    container_name: cassandra-seed
    depends_on:
       - cassandra
    networks:
      - flight_network
    entrypoint: >
      /bin/bash -c "
        echo 'Esperando a que Cassandra esté disponible...';
        until cqlsh cassandra -e 'SELECT now() FROM system.local'; do
          echo 'Esperando a que Cassandra esté listo...';
          sleep 5;
        done;

        echo 'Cassandra está listo. Creando keyspace y tablas...';
        cqlsh cassandra -e \"
          CREATE KEYSPACE IF NOT EXISTS agile_data_science WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': 1 };
          USE agile_data_science;
          CREATE TABLE IF NOT EXISTS origin_dest_distances (
            origin TEXT,
            destination TEXT,
            distance DOUBLE,
            PRIMARY KEY (origin, destination)
          );
          CREATE TABLE IF NOT EXISTS predictions (
            uuid UUID PRIMARY KEY,
            origin TEXT,
            dayofweek INT,
            dayofmonth INT,
            dayofyear INT,
            dest TEXT,
            depdelay DOUBLE,
            timestamp TEXT,
            flightdate TEXT,
            carrier TEXT,
            distance DOUBLE,
            route TEXT,
            prediction DOUBLE
          );
          CREATE TABLE IF NOT EXISTS distances (
            uuid UUID PRIMARY KEY,
            origin TEXT,
            dest TEXT,
            distance DOUBLE
          );
          CREATE TABLE IF NOT EXISTS airplanes (
            uuid UUID PRIMARY KEY,
            carrier TEXT,
            type TEXT
          );
        \";
        echo 'Esquema creado correctamente';

        echo 'Cargando los datos...';
        cqlsh cassandra -e \"
          USE agile_data_science;
          COPY origin_dest_distances (origin, destination, distance) FROM '/init-data/origin_dest_distances.csv' WITH HEADER = TRUE;
        \";
        echo 'Datos cargados correctamente';
      "
    restart: "no"  # Este servicio se ejecuta una vez y luego termina
    volumes:
      - ./cassandra:/init-data  # Monta el directorio con los datos para inicialización
    

  prediction_app:

    build:
      context: ./prediction
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    depends_on:
       cassandra:
        condition: service_healthy 
       

    environment:
      - PROJECT_HOME=/app/practica
    volumes:
      - ./practica:/app/practica
    command: >
      bash -c "
      cd /app/practica/resources/web &&
      python3 predict_flask.py"
    networks:
      - flight_network

  
  proxy:
    image: node:18-alpine
    container_name: proxy
    command: "node /client/node.js"
    ports: 
      - "3000:3000"
    volumes:
     - ./spark/client:/client
    networks:
      - flight_network

  #Spark Master
  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
    
    volumes:
      - ./practica:/spark/work-dir/practica
    networks:
      - flight_network
    

  #Spark Worker 1
  spark-worker-1:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    volumes:
      - ./practica:/spark/work-dir/practica
    networks:
      - flight_network
    

  #Spark Worker 2
  spark-worker-2:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    volumes:
      - ./practica:/spark/work-dir/practica
    networks:
      - flight_network
    

  spark-submit:
    build: ./spark
    container_name: spark-submit
    depends_on:
      - spark-master
      - spark-worker-1
      - spark-worker-2
    ports:
      - "4040:4040"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - "SERVER=proxy"
    volumes:
      - ./practica:/spark/work-dir/practica
    command: >
      /spark/bin/spark-submit
      --class es.upm.dit.ging.predictor.MakePrediction
      --master spark://spark-master:7077
      --packages com.datastax.spark:spark-cassandra-connector_2.12:3.4.1,org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.0
      /spark/work-dir/practica/flight_prediction/target/scala-2.12/flight_prediction_2.12-0.1.jar

    networks:
      - flight_network


  
networks:
   flight_network:
      driver: "bridge"
      name: "flight_network" 



